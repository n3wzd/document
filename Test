# Test
## JUnit
**JUnit**은 자바에서 **단위 테스트(Unit Test)**를 작성하고 실행할 수 있게 도와주는 프레임워크입니다. **단위 테스트**는 애플리케이션의 개별적인 기능이나 메서드가 예상대로 작동하는지 확인하는 테스트입니다. JUnit은 테스트를 작성하고, 실행하고, 결과를 확인하는 과정을 간소화해줍니다.

1. **테스트 메서드 정의**: `@Test` 어노테이션을 사용하여 테스트할 메서드를 정의합니다.
2. **Assertions**: 테스트 결과를 검증하기 위한 다양한 **assertion 메서드**를 제공합니다. 예를 들어, `assertEquals()`, `assertTrue()`, `assertNotNull()` 등을 사용하여 실제 값과 예상 값을 비교할 수 있습니다.
3. **테스트 실행 및 결과 확인**: JUnit은 테스트를 자동으로 실행하고, 각 테스트의 성공 여부를 보고합니다.
4. **셋업 및 티어다운**: 테스트를 실행하기 전후에 공통적인 작업을 수행할 수 있는 `@BeforeEach`와 `@AfterEach` 어노테이션을 제공합니다.

**Spring Boot** 프로젝트에서 테스트 코드는 보통 `src/test/java` 폴더 내에 작성되며, **JUnit**을 사용하여 테스트를 작성합니다.

Maven 사용시, `mvn test`, Gradle 사용시 `gradle test` 명령어를 사용하여 테스트를 실행합니다.

## Mock
**Mock**(모의 객체)는 소프트웨어 테스트에서 실제 객체의 동작을 시뮬레이션하는 가짜 객체입니다. 실제 객체 대신 사용하여 테스트 환경을 제어하고, 의존하는 외부 시스템이나 복잡한 객체의 동작을 대체하는 역할을 합니다. 주로 단위 테스트에서 사용됩니다.

1. **동작 정의**: 특정 메서드가 호출될 때 반환할 값을 설정하거나, 예외를 발생시킬 수 있습니다.
2. **상호작용 검증**: 테스트 후, Mock 객체의 메서드가 호출되었는지, 몇 번 호출되었는지 등을 검증할 수 있습니다.
3. **독립성**: 실제 객체가 필요하지 않으므로, 테스트 대상이 다른 시스템에 의존하지 않고 독립적으로 동작할 수 있습니다.

예를 들어, 데이터베이스를 사용하는 서비스가 있을 때, 실제 데이터베이스에 연결하지 않고도 데이터베이스 관련 기능을 테스트할 수 있습니다. 이를 위해 데이터베이스 연결을 모의 객체로 대체할 수 있습니다.

## Mockito
Mockito는 Java에서 사용되는 외부 테스트 프레임워크로, 주로 단위 테스트를 작성할 때 사용됩니다. 주된 기능은 **모의 객체(mock object)**를 생성하여 실제 객체의 동작을 시뮬레이션하는 것입니다. 이를 통해 실제 객체를 사용하지 않고도 테스트를 진행할 수 있습니다.

- **모의 객체 생성**: 실제 구현체를 사용하지 않고, 인터페이스나 클래스의 모의 객체를 생성하여 테스트할 수 있습니다.
- **행동 정의**: 모의 객체가 특정 메서드를 호출할 때 반환할 값을 설정할 수 있습니다.
- **검증**: 테스트가 끝난 후, 모의 객체의 메서드가 호출되었는지, 몇 번 호출되었는지를 검증할 수 있습니다.
- **예외 처리**: 특정 메서드 호출 시 예외를 발생시키도록 설정할 수 있습니다.

```
import static org.mockito.Mockito.*;

public class MyServiceTest {
    @Test
    public void testServiceMethod() {
        // MyService의 의존성을 모의 객체로 설정
        MyRepository mockRepo = mock(MyRepository.class);
        when(mockRepo.findData()).thenReturn("Mock Data");

        MyService service = new MyService(mockRepo);
        String result = service.fetchData();

        assertEquals("Mock Data", result);
    }
}
```

`MyRepository`의 실제 구현 대신 `mock`을 사용하고, `findData()` 메서드가 호출될 때 `"Mock Data"`를 반환하도록 설정합니다. 이를 통해 실제 데이터베이스나 외부 시스템을 호출하지 않고도 `MyService`의 `fetchData()` 메서드를 테스트할 수 있습니다.
